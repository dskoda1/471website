/*******************************************************************
        CS471 - Programming Languages
        Assignment #<number> due: <DATE>
        Author: <LastName>, <FirstName> (<EMail>)
        Date: <DATE>
*****************************************************************/


/* In class on Monday we defined a predicate "simplity/3" that succeeds if the last arguement is 
      a list with items with the form Var:Value,  
      the first argument is a "var" atom in the list and 
      the second argument is the var's Value.  Requires only one clause.
      (hint::member, atom).
      ?- simplify(b,Value,[a:100,b:(-5)]).
      Value = -5
      ?- simplify(b,Value,[a : 1,b : 5, c : 10]).
      Value = 5 .
      */

      
/* 1: Now extend predicate "simplity/3" to  evaluates an algebraic expression.
   The algebraic expression consists of variable with operators 'plus', 
   'minus' and 'times'. Here are two test queries:
          ?- simplify(plus(times(x,y),times(3 ,minus(x,y))),V,[x:4,y:2]).
          V = 14
          ?- simplify(times(2,plus(a,b)),Val,[a:1,b:5]).
          Val = 12
          ?- simplify(times(2,plus(a,b)),Val,[a:1,b:(-5)]).
          Val = -8 .
     Requires only a total 5 clauses including the clause from %2.  
    You may use "number" in one of your clauses. 
*/


% --- value(+Coin, +Num, ?Amt)
/* Below is a database of US coins. */

coin(dollar, 100).
coin(half, 50).
coin(quarter, 25).
coin(dime,10).
coin(nickel,5).
coin(penny,1).

/* 2: Write a predicate, value(Coin, Num, Amt), where Coin is the name,
      Num is how many and Amt is the total value, 
     (the value of the coin (in pennies) times the number of coins. )
     You should use the facts created above as
      as subgoal to find the value in pennies of the coin.
        ?- value(quarter,5, Amt).
        Amt = 125
        ?- value(dime,10, 100).
        Yes
        ?- value(dime,N, 100).
        ERROR: is/2: Arguments are not sufficiently instantiated
 */



%3. sumL(N,S).
/* Is simular to sumR(+Nlst,?Plst), except that sum values
   accumulate left to right. e.g. The first value in Plst will be the element
   of Nlst,  the second value will be first element  * the second element of Nlst , etc.


    2 additional clauses. 
    OR
    You can overload the functor to use 3 argument 
    sumL3([Hn|Tn],Plst):- sumL3(Tn, Hn,Plst).
    and two more clauses.
       
    ?- sumL([2,3,4],P).
    P = [2, 5, 9] .

   ?-  sumL([4,3,2],P).
   P = [4, 7, 9] .

   ?- sumL([4,3,2,7],P).
   P = [4, 7, 9, 16] .

  

*/




