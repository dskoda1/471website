/*
      CS471 - Programming Languages
        Assignment #<number> due: <DATE>
        Author: <LastName>, <FirstName> (<EMail>)
        Date: <DATE>
 */

/* Purpose:
 * to practice writing relations in Prolog
 
   This assignment is not intended to be hard, however many will need
   time to absorb how easy it really is.
   Most require only two clauses and none require more than 3 clauses.
   You should add the extension ".pl" to the file name.
   
 */



/*1: Variation of exercise 3.2 from "Learn Prolog Now!" 
See http://cs.union.edu/~striegnk/learn-prolog-now/html/node27.html#subsec.l3.ex3
for explanation. (note: the functor is sucC not succ since succ is a built in 
predicate.
     Define a predicate less_than/2 that takes two numerals in the notation 
     that we introduced in this lecture (i.e. 0, sucC(0), sucC(sucC(0)) ...) as 
     arguments and decides whether the first one is greater than the second one. 
    E.g:
       ?- less_than(sucC(sucC(sucC(0))),sucC(0)).
       false
       ?- less_than(sucC(sucC(0)),sucC(sucC(sucC(0)))).
       true
       ?- less_than(sucC(0),sucC(0)).
       false
    
     sucC is an example of using nested terms.
*/



/*2: Define a predicate sameLen(Lst1, Lst2), such that it succeeds if lists 
     Lst1 and Lst2 have the same length.  Use a recursive definition.  DO NOT USE
     the built in predicate  "length". e.g.
          ?- sameLen([1,2,3],[1,2]).
          No
          ?- sameLen([1,2,3],[a,b,c]).
         Yes
  */
  


/*3: Define a predicate equivalent(Lst1, Lst2), such that it succeeds if lists 
     Lst1 and Lst2 have equivalent elements in the same order.  Use a recursive 
     definition.
          ?- equivalent([1,2,3],[1,2]).
          No
          ?- equivalent([1,2,3],[1,2,3]).
          Yes
          ?- equivalent([1,2,3],[3,2,1]).
          No
  */


/* 4: Define a predicate hasSubseq(L,S), such that it succeeds if the list L contains 
      the list S as a sub-sequence. Use recursive definition.
      e.g. 
      ?-hasSubseq([a,g,b,d],[g,b]). 
      Yes 
      ?- hasSubseq([a,g,b,d],[g,d]). 
      yes
      ?- hasSubseq([a,g,b,d],[b,g]).
      no
      
   */




/*5: init(Lst, InitOfLst) succeeds if InitOfLst is the same as Lst except the 
     last element of Lst is missing. i.e. 
     ?- init([a,b,c,d,e],Init). 
     Init= [a, b, c, d] 
     Yes
 */


/* 6: nth(Num,Lst,Element) succeeds if the Numth element of the list
        Lst is Element. The count starts with 0.
E.g.
     ?- nth(3,[a,b,c,d,e,f,g],E).
     E = d
     Yes
*/



/*7: Define the procedure 'zip' so that zip(Lst1,Lst2,Zipped) succeeds if
     Zipped is a list of sequences (tuples) . The first value of the sequence 
     is from the corresponding position from Lst1 and the second value is from 
     corresponding position from Lst2. Note: The length of Zipped will be the
     minimum of the length of Lst1 and length of Lst2. e.g.
           ?- zip([1,2,3,4],[a,b,c],Z).
           Z = [ (1, a), (2, b), (3, c)] 
           Yes
           ?- zip([a],[1,2,3,4],Z).
           Z = [ (a, 1)] 
           Yes
*/






